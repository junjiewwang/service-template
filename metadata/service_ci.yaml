# ============================================
# TCS Service Configuration
# Version: 2.0
# ============================================

# ============================================
# 基础服务信息
# ============================================
service:
  name: apm-api
  description: "APM API Service"

  # 服务端口配置（支持多端口）
  ports:
  - name: http
    port: 16686
    protocol: TCP
    expose: false
    description: "HTTP API port"

  deploy_dir: /usr/local/services

# ============================================
# 语言和版本配置
# ============================================
language:
  type: go # go | python | nodejs | java | rust
  version: "1.23"
  config:
    goproxy: "https://goproxy.woa.com,direct"
    gosumdb: "sum.woa.com+643d7a06+Ac5f5VOC4N8NUXdmhbm8pZSXIWfhek5JSmWdWrq7pLX4"

# ============================================
# 构建配置
# ============================================
build:
  dependency_files:
    auto_detect: true

  builder_image:
    amd64: "mirrors.tencent.com/tcs-infra/tceforqci_x86_go23:v1.0.0"
    arm64: "mirrors.tencent.com/tcs-infra/tceforqci_arm_go23:v1.0.0"

  runtime_image:
    amd64: "mirrors.tencent.com/tencentos/tencentos3-minimal:latest"
    arm64: "mirrors.tencent.com/tencentos/tencentos3-minimal:latest"

  system_dependencies:
    build:
      packages:
      - gzip
      - curl
      - tar

  commands:
    pre_build: |
      echo "Pre-build stage"
      go version

    build: |
      GOSUMD=off go build -o ${BUILD_OUTPUT_DIR}/bin/apm-api ./cmd/tapm-api-tcs
      mkdir -p ${BUILD_OUTPUT_DIR}/conf
      cp -f ./conf/tab.yaml ${BUILD_OUTPUT_DIR}/conf/
      cp -f ./conf/table.toml ${BUILD_OUTPUT_DIR}/conf/
      cp -f ./conf/flink_rule.yaml ${BUILD_OUTPUT_DIR}/conf/

    post_build: |
      echo "Post-build completed"

  output_dir: dist

# ============================================
# 插件配置
# ============================================
# 1、在build.sh脚本中将插件放置在/plugins目录下，在dockerfile中以/plugins目录来将插件从builder镜像中copy到runtime镜像中,然后再根据插件的install_dir来将插件copy到对应的目录中
# 2、插件需要支持运行时的环境变量设置runtime_env，即将runtime_env配置放置在对应插件的目录下，然后再runtime镜像中使插件的环境变量生效，可以在/plugins目录下集成一个install.sh来实现
plugins:
- name: selfMonitor
  description: "TCE Self Monitor Tool"
  download_url: "https://mirrors.tencent.com/repository/generic/selfMonitor/download_tool.sh"
  install_dir: /tce
  install_command: |
    echo "Installing ${PLUGIN_NAME} to ${PLUGIN_INSTALL_DIR}..."
    curl -fsSL "${PLUGIN_DOWNLOAD_URL}" | bash -s "${PLUGIN_INSTALL_DIR}"
    echo "${PLUGIN_NAME} installed successfully"
  # 运行时环境变量
  runtime_env:
  - name: TCESTAURY_TOOL_PATH
    value: ${PLUGIN_INSTALL_DIR}
  - name: TCESTAURY_CONFIG_PATH
    value: ${PLUGIN_INSTALL_DIR}/config
  required: true
# ============================================
# 运行时配置
# ============================================
# 在build.sh中将运行时配置所生成的entrypoint.sh脚本和healthcheck.sh脚本放到服务目录中
runtime:
  system_dependencies:
    packages: []

  healthcheck:
    enabled: true
    type: exec

  startup:
    command: |
      #!/bin/sh
      set -e
      cd ${SERVICE_ROOT}
      exec ./bin/${SERVICE_NAME}

    env:
    - name: JAEGER_SERVICE_NAME
      value: tapm-api

# ============================================
# 本地开发和测试配置
# ============================================
local_dev:
  compose:
    resources:
      limits:
        cpus: "0.5"
        memory: 1G
      reservations:
        cpus: "0.25"
        memory: 512M

    volumes:
    - source: ./bk-ci/tcs/build/config.yaml
      # 支持${SERVICE_ROOT}变量的替换
      target: ${SERVICE_ROOT}/config.yaml
      type: bind
      description: "Service config"

    - source: ./bk-ci/tcs/build/sdk.json
      # 支持${PLUGIN_INSTALL_DIR}变量的替换
      target: ${PLUGIN_INSTALL_DIR}/config/sdk.json
      type: bind
      description: "TCE SDK config"

    healthcheck:
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    labels:
      kompose.image-pull-policy: "IfNotPresent"
      reloader.stakater.com/auto: "true"

  kubernetes:
    enabled: true
    namespace: default
    output_dir: k8s-manifests
    volume_type: configMap

    configmap:
      auto_detect: true

    wait:
      enabled: true
      timeout: 300s

# ============================================
# Makefile 生成配置
# ============================================
makefile:
  custom_targets:
  - name: test
    description: "Run tests"
    commands:
    - go test -v ./...

  - name: lint
    description: "Run linter"
    commands:
    - golangci-lint run

# ============================================
# 元数据
# ============================================
metadata:
  template_version: "2.0.0"
  generated_at: ""
  generator: "tcs-gen"
